generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  car         Car[]

  @@map("categories")
}

model Specification {
  id                 String               @id @default(uuid())
  name               String
  description        String
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  carsSpecifications CarsSpecifications[]

  @@map("specifications")
}

model User {
  id            String   @id @default(uuid())
  name          String
  email         String
  password      String
  driverLicense String   @map("driver_license")
  isAdmin       Boolean  @default(false) @map("is_admin")
  avatar        String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Car {
  id                 String               @id @default(uuid())
  name               String
  description        String?
  brand              String
  categoryId         String?              @map("category_id")
  category           Category?            @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  licensePlate       String               @map("license_plate")
  available          Boolean              @default(true)
  dailyRate          Float                @map("daily_rate")
  fineAmount         Float                @map("fine_amount")
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  carsSpecifications CarsSpecifications[]

  @@map("cars")
}

model CarsSpecifications {
  carId           String        @map("car_id")
  car             Car           @relation(fields: [carId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  specificationId String        @map("specification_id")
  specification   Specification @relation(fields: [specificationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  assignedAt      DateTime      @default(now()) @map("assigned_at")

  @@id([carId, specificationId])
  @@map("cars_specifications")
}
